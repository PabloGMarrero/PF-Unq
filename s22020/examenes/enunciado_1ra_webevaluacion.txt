1)
Dado el siguiente tipo algebraico para representar laberintos:

data Laberinto a = Salida
                 | Celda a
                 | Pasillo a (Laberinto a)
                 | Bifurcacion (Laberinto a) (Laberinto a)

definir las siguientes funciones

haySalida :: Laberinto a -> Bool, que dado un laberinto indica si el mismo tiene alguna salida
normSalidas :: Laberinto a -> Laberinto a, que dado un laberinto cualquiera, retorna un laberinto con la misma estructura, pero donde toda bifuración que conduce inmediatamente a dos salidas fue reemplazada por una salida (o sea, el resultado no contiene como parte recursiva el laberinto (Bifuracion Salida Salida)).



2)
Suponiendo dadas las definiciones del ejercicio anterior, demostrar la siguiente propiedad 

        haySalida = haySalida . normSalidas
		
3)
Dado el siguiente tipo algebraico (y también el tipo Laberinto de los ejercicios anteriores)

data BoolExp = BBop BBO BoolExp BoolExp | BTrue | BFalse
data BBO = BAnd | BOr

definir las siguientes funciones

evalBE :: BoolExp -> Bool, que dada una expresión booleana da su significado, como el booleano resultante de evaluarla
haySalidaBE :: Laberinto a -> BoolExp, que dado un laberinto, construye una expresión booleana que expresa que el laberinto tiene salida, de manera puramente simbólica.
Como recordatorio, el tipo Laberinto se define como

data Laberinto a = Salida
                 | Celda a
                 | Pasillo a (Laberinto a)
                 | Bifurcacion (Laberinto a) (Laberinto a)
				 
4)
Suponiendo dadas las definiciones de los ejercicios anteriores, demostrar la siguiente propiedad 

        evalBE . haySalidaBE = haySalida
		
5)
Suponiendo dadas las definiciones de los ejercicios anteriores, y dada la siguiente función auxiliar

delta :: Bool -> Int
delta True  = 1
delta False = 0

definir las siguientes funciones

cantQueCumplen :: (a -> Bool) -> Laberinto a -> Int, que dado un predicado sobre elementos de tipo a y un laberinto, describe cuántos de los elementos que se encuentran en el laberinto dado cumplen el predicado dado.
objs2Int :: (a -> Int) -> Laberinto a -> Laberinto Int, que dada una función de peso sobre elementos de tipo a y un laberinto, describe un laberinto donde todos los elementos fueron reemplazados por su peso.
losQueCumplenPorDistancia :: (a -> Bool) -> Laberinto a -> [[a]], que dado un predicado sobre los elementos de tipo a y un laberinto, retorna la lista de aquellas listas que contienen a todos los elementos que aparecen en el laberinto a la misma distancia de la entrada (sin contar las bifurcaciones).
Por ejemplo,
losQueCumplenPorDistancia esPar
      (Pasillo 2 (Bifurcación (Pasillo 6 (Bifurcación (Celda 8) (Celda 4)))
                 (Pasillo 10 (Celda 12)))
  = [[2], [6,10], [8,4,12]]
porque 2 está a distancia 0 de la entrada, 6 y 10 están a distancia 1 de la entrada, y 8, 4 y 12 están a distancia 2 de la entrada.
Como recordatorio, el tipo Laberinto se define como

data Laberinto a = Salida
                 | Celda a
                 | Pasillo a (Laberinto a)
                 | Bifurcacion (Laberinto a) (Laberinto a)



6)
Suponiendo dadas las definiciones de los ejercicios anteriores, y la siguiente función

sumObj :: Laberinto Int -> Int
sumObj Salida                  = 0
sumObj (Celda n)               = n
sumObj (Pasillo x lab)         = x + sumObj lab
sumObj (Bifurcacion lab1 lab2) = sumObj lab1 + sumObj lab2

demostrar la siguiente propiedad 

       cantQueCumplen (const True) = sumObj . objs2Int (const 1)

